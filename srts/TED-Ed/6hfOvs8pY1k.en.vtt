WEBVTT
Kind: captions
Language: en

00:00:01.310 --> 00:00:14.750 align:start position:0%
 
[Music]

00:00:14.750 --> 00:00:14.760 align:start position:0%
 
 

00:00:14.760 --> 00:00:17.640 align:start position:0%
 
what's<00:00:15.760><c> an</c><00:00:15.879><c> algorithm</c><00:00:16.390><c> in</c><00:00:16.540><c> computer</c><00:00:17.260><c> science</c>

00:00:17.640 --> 00:00:17.650 align:start position:0%
what's an algorithm in computer science
 

00:00:17.650 --> 00:00:19.589 align:start position:0%
what's an algorithm in computer science
an<00:00:17.800><c> algorithm</c><00:00:18.460><c> was</c><00:00:18.670><c> a</c><00:00:18.700><c> set</c><00:00:18.939><c> of</c><00:00:19.029><c> instructions</c>

00:00:19.589 --> 00:00:19.599 align:start position:0%
an algorithm was a set of instructions
 

00:00:19.599 --> 00:00:21.870 align:start position:0%
an algorithm was a set of instructions
for<00:00:19.720><c> solving</c><00:00:20.140><c> some</c><00:00:20.349><c> problem</c><00:00:20.770><c> step</c><00:00:21.189><c> by</c><00:00:21.340><c> step</c>

00:00:21.870 --> 00:00:21.880 align:start position:0%
for solving some problem step by step
 

00:00:21.880 --> 00:00:23.820 align:start position:0%
for solving some problem step by step
typically<00:00:22.660><c> algorithms</c><00:00:23.230><c> are</c><00:00:23.349><c> executed</c><00:00:23.800><c> by</c>

00:00:23.820 --> 00:00:23.830 align:start position:0%
typically algorithms are executed by
 

00:00:23.830 --> 00:00:25.560 align:start position:0%
typically algorithms are executed by
computers<00:00:24.399><c> but</c><00:00:24.669><c> we</c><00:00:24.730><c> humans</c><00:00:24.970><c> have</c><00:00:25.300><c> algorithms</c>

00:00:25.560 --> 00:00:25.570 align:start position:0%
computers but we humans have algorithms
 

00:00:25.570 --> 00:00:27.960 align:start position:0%
computers but we humans have algorithms
as<00:00:25.930><c> well</c><00:00:26.009><c> for</c><00:00:27.009><c> instance</c><00:00:27.340><c> how</c><00:00:27.669><c> would</c><00:00:27.790><c> you</c><00:00:27.880><c> go</c>

00:00:27.960 --> 00:00:27.970 align:start position:0%
as well for instance how would you go
 

00:00:27.970 --> 00:00:29.490 align:start position:0%
as well for instance how would you go
about<00:00:28.000><c> counting</c><00:00:28.419><c> the</c><00:00:28.720><c> number</c><00:00:28.930><c> of</c><00:00:28.989><c> people</c><00:00:29.349><c> in</c><00:00:29.410><c> a</c>

00:00:29.490 --> 00:00:29.500 align:start position:0%
about counting the number of people in a
 

00:00:29.500 --> 00:00:31.830 align:start position:0%
about counting the number of people in a
room<00:00:29.529><c> well</c><00:00:30.520><c> if</c><00:00:30.849><c> you're</c><00:00:31.000><c> like</c><00:00:31.180><c> me</c><00:00:31.419><c> you'd</c>

00:00:31.830 --> 00:00:31.840 align:start position:0%
room well if you're like me you'd
 

00:00:31.840 --> 00:00:33.630 align:start position:0%
room well if you're like me you'd
probably<00:00:31.869><c> point</c><00:00:32.500><c> at</c><00:00:32.590><c> each</c><00:00:32.680><c> person</c><00:00:32.950><c> one</c><00:00:33.489><c> at</c><00:00:33.610><c> a</c>

00:00:33.630 --> 00:00:33.640 align:start position:0%
probably point at each person one at a
 

00:00:33.640 --> 00:00:36.389 align:start position:0%
probably point at each person one at a
time<00:00:33.880><c> and</c><00:00:34.180><c> count</c><00:00:34.600><c> up</c><00:00:34.750><c> from</c><00:00:34.870><c> zero</c><00:00:35.200><c> one</c><00:00:35.950><c> two</c>

00:00:36.389 --> 00:00:36.399 align:start position:0%
time and count up from zero one two
 

00:00:36.399 --> 00:00:39.000 align:start position:0%
time and count up from zero one two
three<00:00:36.700><c> four</c><00:00:36.970><c> and</c><00:00:37.690><c> so</c><00:00:37.750><c> forth</c><00:00:38.200><c> well</c><00:00:38.739><c> that's</c><00:00:38.890><c> an</c>

00:00:39.000 --> 00:00:39.010 align:start position:0%
three four and so forth well that's an
 

00:00:39.010 --> 00:00:40.650 align:start position:0%
three four and so forth well that's an
algorithm<00:00:39.520><c> in</c><00:00:39.700><c> fact</c><00:00:40.149><c> let's</c><00:00:40.390><c> try</c><00:00:40.510><c> to</c><00:00:40.570><c> express</c>

00:00:40.650 --> 00:00:40.660 align:start position:0%
algorithm in fact let's try to express
 

00:00:40.660 --> 00:00:42.540 align:start position:0%
algorithm in fact let's try to express
it<00:00:41.140><c> a</c><00:00:41.200><c> bit</c><00:00:41.350><c> more</c><00:00:41.500><c> formally</c><00:00:42.070><c> in</c><00:00:42.100><c> pseudocode</c>

00:00:42.540 --> 00:00:42.550 align:start position:0%
it a bit more formally in pseudocode
 

00:00:42.550 --> 00:00:44.880 align:start position:0%
it a bit more formally in pseudocode
English<00:00:43.510><c> like</c><00:00:43.720><c> syntax</c><00:00:43.750><c> that</c><00:00:44.230><c> resembles</c><00:00:44.800><c> a</c>

00:00:44.880 --> 00:00:44.890 align:start position:0%
English like syntax that resembles a
 

00:00:44.890 --> 00:00:47.360 align:start position:0%
English like syntax that resembles a
programming<00:00:45.340><c> language</c><00:00:45.540><c> let</c><00:00:46.540><c> n</c><00:00:46.720><c> equal</c><00:00:46.750><c> zero</c>

00:00:47.360 --> 00:00:47.370 align:start position:0%
programming language let n equal zero
 

00:00:47.370 --> 00:00:51.090 align:start position:0%
programming language let n equal zero
for<00:00:48.370><c> each</c><00:00:48.490><c> person</c><00:00:48.970><c> in</c><00:00:49.090><c> room</c><00:00:49.360><c> set</c><00:00:50.260><c> n</c><00:00:50.470><c> equal</c><00:00:50.950><c> to</c><00:00:51.070><c> n</c>

00:00:51.090 --> 00:00:51.100 align:start position:0%
for each person in room set n equal to n
 

00:00:51.100 --> 00:00:53.730 align:start position:0%
for each person in room set n equal to n
plus<00:00:51.730><c> 1</c><00:00:51.850><c> how</c><00:00:52.720><c> to</c><00:00:52.780><c> interpret</c><00:00:53.110><c> the</c><00:00:53.380><c> pseudocode</c>

00:00:53.730 --> 00:00:53.740 align:start position:0%
plus 1 how to interpret the pseudocode
 

00:00:53.740 --> 00:00:56.280 align:start position:0%
plus 1 how to interpret the pseudocode
quelt<00:00:54.370><c> line</c><00:00:54.610><c> 1</c><00:00:54.820><c> declares</c><00:00:55.420><c> so</c><00:00:55.750><c> to</c><00:00:55.810><c> speak</c><00:00:56.110><c> a</c>

00:00:56.280 --> 00:00:56.290 align:start position:0%
quelt line 1 declares so to speak a
 

00:00:56.290 --> 00:00:58.590 align:start position:0%
quelt line 1 declares so to speak a
variable<00:00:56.890><c> called</c><00:00:57.070><c> n</c><00:00:57.370><c> and</c><00:00:57.640><c> initializes</c><00:00:58.420><c> its</c>

00:00:58.590 --> 00:00:58.600 align:start position:0%
variable called n and initializes its
 

00:00:58.600 --> 00:01:00.900 align:start position:0%
variable called n and initializes its
value<00:00:58.900><c> to</c><00:00:59.020><c> 0</c><00:00:59.260><c> this</c><00:01:00.010><c> just</c><00:01:00.250><c> means</c><00:01:00.430><c> that</c><00:01:00.579><c> at</c><00:01:00.790><c> the</c>

00:01:00.900 --> 00:01:00.910 align:start position:0%
value to 0 this just means that at the
 

00:01:00.910 --> 00:01:02.790 align:start position:0%
value to 0 this just means that at the
beginning<00:01:01.060><c> of</c><00:01:01.390><c> our</c><00:01:01.570><c> algorithm</c><00:01:02.140><c> the</c><00:01:02.530><c> thing</c>

00:01:02.790 --> 00:01:02.800 align:start position:0%
beginning of our algorithm the thing
 

00:01:02.800 --> 00:01:04.469 align:start position:0%
beginning of our algorithm the thing
with<00:01:02.980><c> which</c><00:01:03.130><c> we're</c><00:01:03.310><c> counting</c><00:01:03.700><c> has</c><00:01:03.910><c> a</c><00:01:03.940><c> value</c><00:01:04.180><c> of</c>

00:01:04.469 --> 00:01:04.479 align:start position:0%
with which we're counting has a value of
 

00:01:04.479 --> 00:01:06.870 align:start position:0%
with which we're counting has a value of
0<00:01:04.869><c> after</c><00:01:05.199><c> all</c><00:01:05.740><c> before</c><00:01:05.950><c> we</c><00:01:06.100><c> start</c><00:01:06.220><c> counting</c><00:01:06.460><c> we</c>

00:01:06.870 --> 00:01:06.880 align:start position:0%
0 after all before we start counting we
 

00:01:06.880 --> 00:01:08.550 align:start position:0%
0 after all before we start counting we
haven't<00:01:07.119><c> counted</c><00:01:07.270><c> anything</c><00:01:07.840><c> yet</c><00:01:07.990><c> calling</c>

00:01:08.550 --> 00:01:08.560 align:start position:0%
haven't counted anything yet calling
 

00:01:08.560 --> 00:01:10.679 align:start position:0%
haven't counted anything yet calling
this<00:01:08.680><c> variable</c><00:01:09.100><c> n</c><00:01:09.280><c> is</c><00:01:09.520><c> just</c><00:01:09.939><c> a</c><00:01:10.000><c> convention</c><00:01:10.270><c> I</c>

00:01:10.679 --> 00:01:10.689 align:start position:0%
this variable n is just a convention I
 

00:01:10.689 --> 00:01:12.630 align:start position:0%
this variable n is just a convention I
could<00:01:11.200><c> have</c><00:01:11.290><c> called</c><00:01:11.439><c> it</c><00:01:11.560><c> most</c><00:01:11.770><c> anything</c><00:01:12.070><c> now</c>

00:01:12.630 --> 00:01:12.640 align:start position:0%
could have called it most anything now
 

00:01:12.640 --> 00:01:14.850 align:start position:0%
could have called it most anything now
line<00:01:12.970><c> to</c><00:01:13.300><c> des</c><00:01:13.510><c> marks</c><00:01:13.780><c> the</c><00:01:13.930><c> start</c><00:01:14.140><c> of</c><00:01:14.200><c> a</c><00:01:14.320><c> loop</c><00:01:14.620><c> a</c>

00:01:14.850 --> 00:01:14.860 align:start position:0%
line to des marks the start of a loop a
 

00:01:14.860 --> 00:01:16.560 align:start position:0%
line to des marks the start of a loop a
sequence<00:01:15.400><c> of</c><00:01:15.490><c> steps</c><00:01:15.760><c> that</c><00:01:15.940><c> will</c><00:01:16.150><c> repeat</c><00:01:16.540><c> some</c>

00:01:16.560 --> 00:01:16.570 align:start position:0%
sequence of steps that will repeat some
 

00:01:16.570 --> 00:01:18.899 align:start position:0%
sequence of steps that will repeat some
number<00:01:16.870><c> of</c><00:01:17.110><c> times</c><00:01:17.409><c> so</c><00:01:18.010><c> in</c><00:01:18.130><c> our</c><00:01:18.250><c> example</c><00:01:18.400><c> the</c>

00:01:18.899 --> 00:01:18.909 align:start position:0%
number of times so in our example the
 

00:01:18.909 --> 00:01:20.520 align:start position:0%
number of times so in our example the
step<00:01:19.120><c> we're</c><00:01:19.270><c> taking</c><00:01:19.630><c> is</c><00:01:19.750><c> counting</c><00:01:20.140><c> people</c><00:01:20.409><c> in</c>

00:01:20.520 --> 00:01:20.530 align:start position:0%
step we're taking is counting people in
 

00:01:20.530 --> 00:01:23.100 align:start position:0%
step we're taking is counting people in
the<00:01:20.620><c> room</c><00:01:20.860><c> beneath</c><00:01:21.610><c> line</c><00:01:22.000><c> 2</c><00:01:22.240><c> is</c><00:01:22.390><c> line</c><00:01:22.570><c> 3</c><00:01:22.900><c> which</c>

00:01:23.100 --> 00:01:23.110 align:start position:0%
the room beneath line 2 is line 3 which
 

00:01:23.110 --> 00:01:24.660 align:start position:0%
the room beneath line 2 is line 3 which
describes<00:01:23.560><c> exactly</c><00:01:23.740><c> how</c><00:01:24.100><c> we'll</c><00:01:24.520><c> go</c><00:01:24.640><c> about</c>

00:01:24.660 --> 00:01:24.670 align:start position:0%
describes exactly how we'll go about
 

00:01:24.670 --> 00:01:27.060 align:start position:0%
describes exactly how we'll go about
counting<00:01:25.390><c> the</c><00:01:25.900><c> indentation</c><00:01:26.200><c> implies</c><00:01:26.799><c> that</c>

00:01:27.060 --> 00:01:27.070 align:start position:0%
counting the indentation implies that
 

00:01:27.070 --> 00:01:29.460 align:start position:0%
counting the indentation implies that
it's<00:01:27.220><c> line</c><00:01:27.400><c> 3</c><00:01:27.790><c> that</c><00:01:28.000><c> will</c><00:01:28.120><c> repeat</c><00:01:28.510><c> so</c><00:01:29.229><c> what</c><00:01:29.350><c> the</c>

00:01:29.460 --> 00:01:29.470 align:start position:0%
it's line 3 that will repeat so what the
 

00:01:29.470 --> 00:01:30.990 align:start position:0%
it's line 3 that will repeat so what the
pseudocode<00:01:29.770><c> is</c><00:01:30.070><c> saying</c><00:01:30.310><c> is</c><00:01:30.580><c> that</c><00:01:30.610><c> after</c>

00:01:30.990 --> 00:01:31.000 align:start position:0%
pseudocode is saying is that after
 

00:01:31.000 --> 00:01:33.570 align:start position:0%
pseudocode is saying is that after
starting<00:01:31.750><c> at</c><00:01:31.840><c> 0</c><00:01:32.110><c> for</c><00:01:32.770><c> each</c><00:01:32.890><c> person</c><00:01:33.370><c> in</c><00:01:33.490><c> the</c>

00:01:33.570 --> 00:01:33.580 align:start position:0%
starting at 0 for each person in the
 

00:01:33.580 --> 00:01:36.899 align:start position:0%
starting at 0 for each person in the
room<00:01:33.610><c> we'll</c><00:01:34.450><c> increase</c><00:01:34.930><c> n</c><00:01:35.170><c> by</c><00:01:35.440><c> 1</c><00:01:35.710><c> now</c><00:01:36.460><c> is</c><00:01:36.729><c> this</c>

00:01:36.899 --> 00:01:36.909 align:start position:0%
room we'll increase n by 1 now is this
 

00:01:36.909 --> 00:01:38.430 align:start position:0%
room we'll increase n by 1 now is this
algorithm<00:01:37.510><c> correct</c>

00:01:38.430 --> 00:01:38.440 align:start position:0%
algorithm correct
 

00:01:38.440 --> 00:01:40.620 align:start position:0%
algorithm correct
well<00:01:38.830><c> let's</c><00:01:39.010><c> bang</c><00:01:39.159><c> on</c><00:01:39.340><c> it</c><00:01:39.460><c> a</c><00:01:39.549><c> bit</c><00:01:39.700><c> does</c><00:01:40.330><c> it</c><00:01:40.450><c> work</c>

00:01:40.620 --> 00:01:40.630 align:start position:0%
well let's bang on it a bit does it work
 

00:01:40.630 --> 00:01:42.510 align:start position:0%
well let's bang on it a bit does it work
if<00:01:40.780><c> there</c><00:01:40.960><c> are</c><00:01:41.110><c> two</c><00:01:41.560><c> people</c><00:01:41.799><c> in</c><00:01:42.070><c> the</c><00:01:42.310><c> room</c>

00:01:42.510 --> 00:01:42.520 align:start position:0%
if there are two people in the room
 

00:01:42.520 --> 00:01:45.240 align:start position:0%
if there are two people in the room
let's<00:01:43.119><c> see</c><00:01:43.330><c> in</c><00:01:43.540><c> line</c><00:01:44.170><c> one</c><00:01:44.380><c> we</c><00:01:44.409><c> initialize</c><00:01:44.619><c> n</c><00:01:45.220><c> to</c>

00:01:45.240 --> 00:01:45.250 align:start position:0%
let's see in line one we initialize n to
 

00:01:45.250 --> 00:01:47.550 align:start position:0%
let's see in line one we initialize n to
0<00:01:45.400><c> for</c><00:01:46.060><c> each</c><00:01:46.240><c> of</c><00:01:46.420><c> these</c><00:01:46.540><c> two</c><00:01:46.780><c> people</c><00:01:46.990><c> we</c><00:01:47.409><c> then</c>

00:01:47.550 --> 00:01:47.560 align:start position:0%
0 for each of these two people we then
 

00:01:47.560 --> 00:01:50.130 align:start position:0%
0 for each of these two people we then
increment<00:01:47.799><c> n</c><00:01:48.280><c> by</c><00:01:48.640><c> one</c><00:01:48.909><c> so</c><00:01:49.420><c> on</c><00:01:49.540><c> the</c><00:01:49.630><c> first</c><00:01:49.869><c> trip</c>

00:01:50.130 --> 00:01:50.140 align:start position:0%
increment n by one so on the first trip
 

00:01:50.140 --> 00:01:52.649 align:start position:0%
increment n by one so on the first trip
through<00:01:50.440><c> the</c><00:01:50.470><c> loop</c><00:01:50.740><c> we</c><00:01:50.950><c> update</c><00:01:51.369><c> n</c><00:01:51.580><c> from</c><00:01:51.880><c> 0</c><00:01:52.150><c> to</c><00:01:52.479><c> 1</c>

00:01:52.649 --> 00:01:52.659 align:start position:0%
through the loop we update n from 0 to 1
 

00:01:52.659 --> 00:01:54.210 align:start position:0%
through the loop we update n from 0 to 1
on<00:01:52.900><c> the</c><00:01:53.170><c> second</c><00:01:53.530><c> trip</c><00:01:53.680><c> through</c><00:01:53.860><c> that</c><00:01:53.979><c> same</c>

00:01:54.210 --> 00:01:54.220 align:start position:0%
on the second trip through that same
 

00:01:54.220 --> 00:01:57.270 align:start position:0%
on the second trip through that same
loop<00:01:54.430><c> we</c><00:01:54.700><c> update</c><00:01:55.030><c> n</c><00:01:55.240><c> from</c><00:01:55.510><c> 1</c><00:01:55.570><c> to</c><00:01:56.140><c> 2</c><00:01:56.380><c> and</c><00:01:56.650><c> so</c><00:01:57.070><c> by</c>

00:01:57.270 --> 00:01:57.280 align:start position:0%
loop we update n from 1 to 2 and so by
 

00:01:57.280 --> 00:02:00.480 align:start position:0%
loop we update n from 1 to 2 and so by
this<00:01:57.340><c> algorithms</c><00:01:57.700><c> end</c><00:01:58.000><c> n</c><00:01:58.360><c> is</c><00:01:59.229><c> 2</c><00:01:59.860><c> which</c><00:02:00.189><c> indeed</c>

00:02:00.480 --> 00:02:00.490 align:start position:0%
this algorithms end n is 2 which indeed
 

00:02:00.490 --> 00:02:02.070 align:start position:0%
this algorithms end n is 2 which indeed
matches<00:02:00.520><c> the</c><00:02:01.030><c> number</c><00:02:01.150><c> of</c><00:02:01.420><c> people</c><00:02:01.689><c> in</c><00:02:01.780><c> the</c><00:02:01.869><c> room</c>

00:02:02.070 --> 00:02:02.080 align:start position:0%
matches the number of people in the room
 

00:02:02.080 --> 00:02:04.710 align:start position:0%
matches the number of people in the room
so<00:02:02.500><c> far</c><00:02:02.740><c> so</c><00:02:02.979><c> good</c><00:02:03.010><c> how</c><00:02:03.580><c> about</c><00:02:03.610><c> a</c><00:02:03.850><c> corner</c><00:02:04.390><c> case</c>

00:02:04.710 --> 00:02:04.720 align:start position:0%
so far so good how about a corner case
 

00:02:04.720 --> 00:02:06.030 align:start position:0%
so far so good how about a corner case
though<00:02:05.020><c> suppose</c><00:02:05.560><c> that</c><00:02:05.740><c> there</c><00:02:05.890><c> are</c><00:02:06.009><c> zero</c>

00:02:06.030 --> 00:02:06.040 align:start position:0%
though suppose that there are zero
 

00:02:06.040 --> 00:02:08.369 align:start position:0%
though suppose that there are zero
people<00:02:06.549><c> in</c><00:02:07.000><c> the</c><00:02:07.119><c> room</c><00:02:07.299><c> besides</c><00:02:07.659><c> me</c><00:02:08.140><c> who's</c>

00:02:08.369 --> 00:02:08.379 align:start position:0%
people in the room besides me who's
 

00:02:08.379 --> 00:02:10.919 align:start position:0%
people in the room besides me who's
doing<00:02:08.409><c> the</c><00:02:08.799><c> counting</c><00:02:09.220><c> in</c><00:02:09.519><c> line</c><00:02:10.179><c> one</c><00:02:10.420><c> we</c><00:02:10.450><c> again</c>

00:02:10.919 --> 00:02:10.929 align:start position:0%
doing the counting in line one we again
 

00:02:10.929 --> 00:02:13.860 align:start position:0%
doing the counting in line one we again
initialize<00:02:11.080><c> n</c><00:02:11.650><c> to</c><00:02:11.709><c> 0</c><00:02:12.010><c> this</c><00:02:12.939><c> time</c><00:02:13.239><c> though</c><00:02:13.540><c> line</c>

00:02:13.860 --> 00:02:13.870 align:start position:0%
initialize n to 0 this time though line
 

00:02:13.870 --> 00:02:15.539 align:start position:0%
initialize n to 0 this time though line
3<00:02:14.140><c> doesn't</c><00:02:14.439><c> execute</c><00:02:14.769><c> at</c><00:02:14.890><c> all</c><00:02:15.010><c> since</c><00:02:15.400><c> there</c>

00:02:15.539 --> 00:02:15.549 align:start position:0%
3 doesn't execute at all since there
 

00:02:15.549 --> 00:02:17.429 align:start position:0%
3 doesn't execute at all since there
isn't<00:02:15.700><c> a</c><00:02:15.939><c> person</c><00:02:16.269><c> in</c><00:02:16.419><c> the</c><00:02:16.569><c> room</c><00:02:16.779><c> and</c><00:02:16.959><c> so</c><00:02:17.290><c> n</c>

00:02:17.429 --> 00:02:17.439 align:start position:0%
isn't a person in the room and so n
 

00:02:17.439 --> 00:02:19.800 align:start position:0%
isn't a person in the room and so n
remains<00:02:17.919><c> 0</c><00:02:18.370><c> which</c><00:02:19.120><c> indeed</c><00:02:19.389><c> matches</c><00:02:19.419><c> the</c>

00:02:19.800 --> 00:02:19.810 align:start position:0%
remains 0 which indeed matches the
 

00:02:19.810 --> 00:02:21.119 align:start position:0%
remains 0 which indeed matches the
number<00:02:19.930><c> of</c><00:02:20.169><c> people</c><00:02:20.439><c> in</c><00:02:20.560><c> the</c><00:02:20.650><c> room</c><00:02:20.799><c> pretty</c>

00:02:21.119 --> 00:02:21.129 align:start position:0%
number of people in the room pretty
 

00:02:21.129 --> 00:02:22.190 align:start position:0%
number of people in the room pretty
simple<00:02:21.519><c> right</c><00:02:21.669><c> but</c>

00:02:22.190 --> 00:02:22.200 align:start position:0%
simple right but
 

00:02:22.200 --> 00:02:23.690 align:start position:0%
simple right but
helping<00:02:22.440><c> people</c><00:02:22.680><c> one</c><00:02:22.860><c> at</c><00:02:22.980><c> a</c><00:02:23.069><c> time</c><00:02:23.280><c> is</c><00:02:23.520><c> pretty</c>

00:02:23.690 --> 00:02:23.700 align:start position:0%
helping people one at a time is pretty
 

00:02:23.700 --> 00:02:26.509 align:start position:0%
helping people one at a time is pretty
inefficient<00:02:24.150><c> -</c><00:02:24.540><c> no</c><00:02:24.870><c> surely</c><00:02:25.709><c> we</c><00:02:25.830><c> can</c><00:02:25.980><c> do</c><00:02:26.069><c> better</c>

00:02:26.509 --> 00:02:26.519 align:start position:0%
inefficient - no surely we can do better
 

00:02:26.519 --> 00:02:28.309 align:start position:0%
inefficient - no surely we can do better
why<00:02:26.670><c> not</c><00:02:26.849><c> count</c><00:02:27.090><c> two</c><00:02:27.629><c> people</c><00:02:27.959><c> at</c><00:02:28.050><c> a</c><00:02:28.080><c> time</c>

00:02:28.309 --> 00:02:28.319 align:start position:0%
why not count two people at a time
 

00:02:28.319 --> 00:02:31.160 align:start position:0%
why not count two people at a time
instead<00:02:28.860><c> of</c><00:02:29.069><c> counting</c><00:02:29.430><c> one</c><00:02:29.700><c> two</c><00:02:29.970><c> three</c><00:02:30.720><c> four</c>

00:02:31.160 --> 00:02:31.170 align:start position:0%
instead of counting one two three four
 

00:02:31.170 --> 00:02:33.770 align:start position:0%
instead of counting one two three four
five<00:02:31.590><c> six</c><00:02:32.040><c> seven</c><00:02:32.670><c> eight</c><00:02:32.910><c> and</c><00:02:32.940><c> so</c><00:02:33.300><c> forth</c>

00:02:33.770 --> 00:02:33.780 align:start position:0%
five six seven eight and so forth
 

00:02:33.780 --> 00:02:36.170 align:start position:0%
five six seven eight and so forth
why<00:02:33.989><c> not</c><00:02:34.170><c> count</c><00:02:34.379><c> two</c><00:02:34.680><c> four</c><00:02:35.129><c> six</c><00:02:35.489><c> eight</c><00:02:35.730><c> and</c><00:02:35.790><c> so</c>

00:02:36.170 --> 00:02:36.180 align:start position:0%
why not count two four six eight and so
 

00:02:36.180 --> 00:02:38.600 align:start position:0%
why not count two four six eight and so
on<00:02:36.629><c> it</c><00:02:36.840><c> even</c><00:02:37.110><c> sounds</c><00:02:37.379><c> faster</c><00:02:38.010><c> and</c><00:02:38.160><c> it</c><00:02:38.250><c> surely</c>

00:02:38.600 --> 00:02:38.610 align:start position:0%
on it even sounds faster and it surely
 

00:02:38.610 --> 00:02:40.910 align:start position:0%
on it even sounds faster and it surely
is<00:02:38.790><c> let's</c><00:02:39.510><c> express</c><00:02:39.870><c> this</c><00:02:40.050><c> optimization</c><00:02:40.769><c> in</c>

00:02:40.910 --> 00:02:40.920 align:start position:0%
is let's express this optimization in
 

00:02:40.920 --> 00:02:43.699 align:start position:0%
is let's express this optimization in
pseudocode<00:02:41.340><c> let</c><00:02:42.060><c> n</c><00:02:42.209><c> equal</c><00:02:42.540><c> zero</c><00:02:43.140><c> for</c><00:02:43.590><c> each</c>

00:02:43.699 --> 00:02:43.709 align:start position:0%
pseudocode let n equal zero for each
 

00:02:43.709 --> 00:02:46.580 align:start position:0%
pseudocode let n equal zero for each
pair<00:02:44.160><c> of</c><00:02:44.190><c> people</c><00:02:44.400><c> in</c><00:02:44.819><c> room</c><00:02:44.880><c> set</c><00:02:45.750><c> n</c><00:02:45.930><c> equal</c><00:02:46.380><c> to</c><00:02:46.560><c> n</c>

00:02:46.580 --> 00:02:46.590 align:start position:0%
pair of people in room set n equal to n
 

00:02:46.590 --> 00:02:47.630 align:start position:0%
pair of people in room set n equal to n
plus<00:02:46.950><c> two</c>

00:02:47.630 --> 00:02:47.640 align:start position:0%
plus two
 

00:02:47.640 --> 00:02:50.150 align:start position:0%
plus two
pretty<00:02:48.360><c> simple</c><00:02:48.569><c> change</c><00:02:48.959><c> right</c><00:02:49.500><c> rather</c><00:02:49.920><c> than</c>

00:02:50.150 --> 00:02:50.160 align:start position:0%
pretty simple change right rather than
 

00:02:50.160 --> 00:02:52.100 align:start position:0%
pretty simple change right rather than
count<00:02:50.370><c> people</c><00:02:50.519><c> one</c><00:02:50.849><c> at</c><00:02:51.000><c> a</c><00:02:51.060><c> time</c><00:02:51.330><c> we</c><00:02:51.810><c> instead</c>

00:02:52.100 --> 00:02:52.110 align:start position:0%
count people one at a time we instead
 

00:02:52.110 --> 00:02:54.559 align:start position:0%
count people one at a time we instead
count<00:02:52.349><c> them</c><00:02:52.530><c> two</c><00:02:52.890><c> at</c><00:02:53.069><c> a</c><00:02:53.129><c> time</c><00:02:53.160><c> this</c><00:02:54.060><c> algorithms</c>

00:02:54.559 --> 00:02:54.569 align:start position:0%
count them two at a time this algorithms
 

00:02:54.569 --> 00:02:56.930 align:start position:0%
count them two at a time this algorithms
does<00:02:54.720><c> twice</c><00:02:54.989><c> as</c><00:02:55.200><c> fast</c><00:02:55.440><c> as</c><00:02:55.709><c> the</c><00:02:55.830><c> last</c><00:02:56.040><c> but</c><00:02:56.730><c> is</c><00:02:56.819><c> it</c>

00:02:56.930 --> 00:02:56.940 align:start position:0%
does twice as fast as the last but is it
 

00:02:56.940 --> 00:02:59.300 align:start position:0%
does twice as fast as the last but is it
correct<00:02:57.239><c> let's</c><00:02:58.049><c> see</c><00:02:58.260><c> does</c><00:02:58.680><c> it</c><00:02:58.709><c> work</c><00:02:58.950><c> if</c><00:02:59.099><c> there</c>

00:02:59.300 --> 00:02:59.310 align:start position:0%
correct let's see does it work if there
 

00:02:59.310 --> 00:03:01.550 align:start position:0%
correct let's see does it work if there
are<00:02:59.459><c> two</c><00:02:59.880><c> people</c><00:02:59.910><c> in</c><00:03:00.299><c> the</c><00:03:00.420><c> room</c><00:03:00.450><c> in</c><00:03:00.930><c> line</c><00:03:01.319><c> one</c>

00:03:01.550 --> 00:03:01.560 align:start position:0%
are two people in the room in line one
 

00:03:01.560 --> 00:03:04.039 align:start position:0%
are two people in the room in line one
we<00:03:01.590><c> initialize</c><00:03:01.769><c> n</c><00:03:02.190><c> to</c><00:03:02.430><c> 0</c><00:03:02.730><c> for</c><00:03:03.299><c> that</c><00:03:03.420><c> one</c><00:03:03.599><c> pair</c>

00:03:04.039 --> 00:03:04.049 align:start position:0%
we initialize n to 0 for that one pair
 

00:03:04.049 --> 00:03:06.440 align:start position:0%
we initialize n to 0 for that one pair
of<00:03:04.260><c> people</c><00:03:04.440><c> we</c><00:03:04.829><c> then</c><00:03:04.950><c> increment</c><00:03:05.160><c> n</c><00:03:05.610><c> by</c><00:03:05.819><c> two</c><00:03:05.880><c> and</c>

00:03:06.440 --> 00:03:06.450 align:start position:0%
of people we then increment n by two and
 

00:03:06.450 --> 00:03:09.229 align:start position:0%
of people we then increment n by two and
so<00:03:06.870><c> by</c><00:03:07.049><c> this</c><00:03:07.110><c> algorithms</c><00:03:07.500><c> end</c><00:03:07.920><c> n</c><00:03:08.130><c> is</c><00:03:08.640><c> two</c><00:03:08.910><c> which</c>

00:03:09.229 --> 00:03:09.239 align:start position:0%
so by this algorithms end n is two which
 

00:03:09.239 --> 00:03:10.880 align:start position:0%
so by this algorithms end n is two which
indeed<00:03:09.569><c> matches</c><00:03:09.599><c> the</c><00:03:10.049><c> number</c><00:03:10.200><c> of</c><00:03:10.470><c> people</c><00:03:10.799><c> in</c>

00:03:10.880 --> 00:03:10.890 align:start position:0%
indeed matches the number of people in
 

00:03:10.890 --> 00:03:12.470 align:start position:0%
indeed matches the number of people in
the<00:03:11.010><c> room</c><00:03:11.160><c> suppose</c><00:03:11.640><c> next</c><00:03:11.910><c> that</c><00:03:12.150><c> there</c><00:03:12.329><c> are</c>

00:03:12.470 --> 00:03:12.480 align:start position:0%
the room suppose next that there are
 

00:03:12.480 --> 00:03:14.630 align:start position:0%
the room suppose next that there are
zero<00:03:12.930><c> people</c><00:03:13.019><c> in</c><00:03:13.410><c> the</c><00:03:13.530><c> room</c><00:03:13.709><c> in</c><00:03:13.980><c> line</c><00:03:14.340><c> one</c><00:03:14.610><c> we</c>

00:03:14.630 --> 00:03:14.640 align:start position:0%
zero people in the room in line one we
 

00:03:14.640 --> 00:03:17.569 align:start position:0%
zero people in the room in line one we
initialize<00:03:14.910><c> n</c><00:03:15.599><c> to</c><00:03:15.630><c> 0</c><00:03:15.840><c> as</c><00:03:16.349><c> before</c><00:03:17.069><c> line</c><00:03:17.310><c> three</c>

00:03:17.569 --> 00:03:17.579 align:start position:0%
initialize n to 0 as before line three
 

00:03:17.579 --> 00:03:19.009 align:start position:0%
initialize n to 0 as before line three
doesn't<00:03:17.910><c> execute</c><00:03:18.269><c> at</c><00:03:18.390><c> all</c><00:03:18.540><c> since</c><00:03:18.840><c> there</c>

00:03:19.009 --> 00:03:19.019 align:start position:0%
doesn't execute at all since there
 

00:03:19.019 --> 00:03:20.720 align:start position:0%
doesn't execute at all since there
aren't<00:03:19.170><c> any</c><00:03:19.319><c> pairs</c><00:03:19.470><c> of</c><00:03:20.069><c> people</c><00:03:20.340><c> in</c><00:03:20.459><c> the</c><00:03:20.549><c> room</c>

00:03:20.720 --> 00:03:20.730 align:start position:0%
aren't any pairs of people in the room
 

00:03:20.730 --> 00:03:23.030 align:start position:0%
aren't any pairs of people in the room
and<00:03:20.940><c> so</c><00:03:21.299><c> n</c><00:03:21.480><c> remain</c><00:03:21.840><c> zero</c><00:03:22.230><c> which</c><00:03:22.769><c> indeed</c>

00:03:23.030 --> 00:03:23.040 align:start position:0%
and so n remain zero which indeed
 

00:03:23.040 --> 00:03:24.650 align:start position:0%
and so n remain zero which indeed
matches<00:03:23.069><c> the</c><00:03:23.489><c> number</c><00:03:23.640><c> of</c><00:03:23.940><c> people</c><00:03:24.150><c> in</c><00:03:24.390><c> the</c><00:03:24.480><c> room</c>

00:03:24.650 --> 00:03:24.660 align:start position:0%
matches the number of people in the room
 

00:03:24.660 --> 00:03:27.229 align:start position:0%
matches the number of people in the room
but<00:03:25.319><c> what</c><00:03:25.500><c> if</c><00:03:25.650><c> there</c><00:03:25.860><c> are</c><00:03:26.040><c> three</c><00:03:26.700><c> people</c><00:03:26.970><c> in</c>

00:03:27.229 --> 00:03:27.239 align:start position:0%
but what if there are three people in
 

00:03:27.239 --> 00:03:29.150 align:start position:0%
but what if there are three people in
the<00:03:27.359><c> room</c><00:03:27.389><c> how</c><00:03:28.019><c> does</c><00:03:28.200><c> this</c><00:03:28.319><c> algorithm</c><00:03:28.680><c> fare</c>

00:03:29.150 --> 00:03:29.160 align:start position:0%
the room how does this algorithm fare
 

00:03:29.160 --> 00:03:32.330 align:start position:0%
the room how does this algorithm fare
let's<00:03:29.970><c> see</c><00:03:30.209><c> in</c><00:03:30.450><c> line</c><00:03:31.019><c> one</c><00:03:31.290><c> we</c><00:03:31.319><c> initialize</c><00:03:31.530><c> n</c><00:03:32.280><c> to</c>

00:03:32.330 --> 00:03:32.340 align:start position:0%
let's see in line one we initialize n to
 

00:03:32.340 --> 00:03:34.640 align:start position:0%
let's see in line one we initialize n to
0<00:03:32.609><c> for</c><00:03:33.239><c> a</c><00:03:33.329><c> pair</c><00:03:33.630><c> of</c><00:03:33.660><c> those</c><00:03:33.870><c> people</c><00:03:34.440><c> we</c><00:03:34.530><c> then</c>

00:03:34.640 --> 00:03:34.650 align:start position:0%
0 for a pair of those people we then
 

00:03:34.650 --> 00:03:37.550 align:start position:0%
0 for a pair of those people we then
increment<00:03:34.950><c> n</c><00:03:35.400><c> by</c><00:03:35.850><c> two</c><00:03:35.910><c> but</c><00:03:36.630><c> then</c><00:03:36.810><c> what</c><00:03:37.049><c> there</c>

00:03:37.550 --> 00:03:37.560 align:start position:0%
increment n by two but then what there
 

00:03:37.560 --> 00:03:39.349 align:start position:0%
increment n by two but then what there
isn't<00:03:37.709><c> another</c><00:03:38.130><c> full</c><00:03:38.459><c> pair</c><00:03:38.730><c> of</c><00:03:38.819><c> people</c><00:03:39.150><c> in</c><00:03:39.269><c> the</c>

00:03:39.349 --> 00:03:39.359 align:start position:0%
isn't another full pair of people in the
 

00:03:39.359 --> 00:03:41.720 align:start position:0%
isn't another full pair of people in the
room<00:03:39.600><c> so</c><00:03:39.900><c> blind</c><00:03:40.200><c> to</c><00:03:40.410><c> no</c><00:03:40.590><c> longer</c><00:03:40.980><c> applies</c><00:03:41.310><c> and</c>

00:03:41.720 --> 00:03:41.730 align:start position:0%
room so blind to no longer applies and
 

00:03:41.730 --> 00:03:44.509 align:start position:0%
room so blind to no longer applies and
so<00:03:42.090><c> by</c><00:03:42.269><c> this</c><00:03:42.329><c> algorithms</c><00:03:42.900><c> end</c><00:03:43.290><c> n</c><00:03:43.470><c> is</c><00:03:43.889><c> still</c><00:03:44.220><c> 2</c>

00:03:44.509 --> 00:03:44.519 align:start position:0%
so by this algorithms end n is still 2
 

00:03:44.519 --> 00:03:45.860 align:start position:0%
so by this algorithms end n is still 2
which<00:03:44.819><c> isn't</c><00:03:45.299><c> correct</c>

00:03:45.860 --> 00:03:45.870 align:start position:0%
which isn't correct
 

00:03:45.870 --> 00:03:47.930 align:start position:0%
which isn't correct
indeed<00:03:46.470><c> this</c><00:03:46.620><c> algorithm</c><00:03:47.130><c> said</c><00:03:47.340><c> to</c><00:03:47.459><c> be</c><00:03:47.549><c> buggy</c>

00:03:47.930 --> 00:03:47.940 align:start position:0%
indeed this algorithm said to be buggy
 

00:03:47.940 --> 00:03:50.030 align:start position:0%
indeed this algorithm said to be buggy
because<00:03:48.450><c> it</c><00:03:48.690><c> has</c><00:03:48.810><c> a</c><00:03:48.840><c> mistake</c><00:03:49.350><c> let's</c><00:03:49.650><c> redress</c>

00:03:50.030 --> 00:03:50.040 align:start position:0%
because it has a mistake let's redress
 

00:03:50.040 --> 00:03:52.599 align:start position:0%
because it has a mistake let's redress
with<00:03:50.220><c> some</c><00:03:50.400><c> new</c><00:03:50.549><c> pseudocode</c><00:03:50.910><c> let</c><00:03:51.630><c> n</c><00:03:51.840><c> equal</c><00:03:52.350><c> 0</c>

00:03:52.599 --> 00:03:52.609 align:start position:0%
with some new pseudocode let n equal 0
 

00:03:52.609 --> 00:03:55.759 align:start position:0%
with some new pseudocode let n equal 0
for<00:03:53.609><c> each</c><00:03:53.760><c> pair</c><00:03:54.150><c> of</c><00:03:54.180><c> people</c><00:03:54.420><c> in</c><00:03:54.690><c> room</c><00:03:54.750><c> set</c><00:03:55.530><c> n</c>

00:03:55.759 --> 00:03:55.769 align:start position:0%
for each pair of people in room set n
 

00:03:55.769 --> 00:03:59.000 align:start position:0%
for each pair of people in room set n
equal<00:03:56.370><c> to</c><00:03:56.670><c> n</c><00:03:56.700><c> plus</c><00:03:57.030><c> two</c><00:03:57.420><c> if</c><00:03:58.200><c> one</c><00:03:58.590><c> person</c>

00:03:59.000 --> 00:03:59.010 align:start position:0%
equal to n plus two if one person
 

00:03:59.010 --> 00:04:01.879 align:start position:0%
equal to n plus two if one person
remains<00:03:59.459><c> unpaired</c><00:04:00.120><c> set</c><00:04:00.750><c> n</c><00:04:00.959><c> equal</c><00:04:01.470><c> to</c><00:04:01.590><c> n</c><00:04:01.620><c> plus</c>

00:04:01.879 --> 00:04:01.889 align:start position:0%
remains unpaired set n equal to n plus
 

00:04:01.889 --> 00:04:03.949 align:start position:0%
remains unpaired set n equal to n plus
one<00:04:02.280><c> to</c><00:04:02.880><c> solve</c><00:04:03.090><c> this</c><00:04:03.209><c> particular</c><00:04:03.510><c> problem</c>

00:04:03.949 --> 00:04:03.959 align:start position:0%
one to solve this particular problem
 

00:04:03.959 --> 00:04:06.259 align:start position:0%
one to solve this particular problem
we've<00:04:04.319><c> introduced</c><00:04:04.769><c> in</c><00:04:04.950><c> line</c><00:04:05.099><c> for</c><00:04:05.400><c> a</c><00:04:05.609><c> condition</c>

00:04:06.259 --> 00:04:06.269 align:start position:0%
we've introduced in line for a condition
 

00:04:06.269 --> 00:04:08.750 align:start position:0%
we've introduced in line for a condition
otherwise<00:04:06.959><c> known</c><00:04:07.380><c> as</c><00:04:07.410><c> a</c><00:04:07.590><c> branch</c><00:04:07.980><c> that</c><00:04:08.340><c> only</c>

00:04:08.750 --> 00:04:08.760 align:start position:0%
otherwise known as a branch that only
 

00:04:08.760 --> 00:04:10.879 align:start position:0%
otherwise known as a branch that only
executes<00:04:09.269><c> if</c><00:04:09.599><c> there's</c><00:04:09.780><c> one</c><00:04:10.049><c> person</c><00:04:10.349><c> we</c><00:04:10.680><c> could</c>

00:04:10.879 --> 00:04:10.889 align:start position:0%
executes if there's one person we could
 

00:04:10.889 --> 00:04:13.280 align:start position:0%
executes if there's one person we could
not<00:04:11.069><c> pair</c><00:04:11.370><c> with</c><00:04:11.549><c> another</c><00:04:11.579><c> and</c><00:04:12.090><c> so</c><00:04:12.599><c> now</c><00:04:12.810><c> whether</c>

00:04:13.280 --> 00:04:13.290 align:start position:0%
not pair with another and so now whether
 

00:04:13.290 --> 00:04:15.559 align:start position:0%
not pair with another and so now whether
there's<00:04:13.560><c> one</c><00:04:13.799><c> or</c><00:04:14.130><c> three</c><00:04:14.340><c> or</c><00:04:14.430><c> any</c><00:04:14.790><c> odd</c><00:04:15.180><c> number</c>

00:04:15.559 --> 00:04:15.569 align:start position:0%
there's one or three or any odd number
 

00:04:15.569 --> 00:04:17.629 align:start position:0%
there's one or three or any odd number
of<00:04:15.599><c> people</c><00:04:15.690><c> in</c><00:04:16.079><c> the</c><00:04:16.169><c> room</c><00:04:16.380><c> this</c><00:04:17.010><c> algorithm</c>

00:04:17.629 --> 00:04:17.639 align:start position:0%
of people in the room this algorithm
 

00:04:17.639 --> 00:04:19.490 align:start position:0%
of people in the room this algorithm
will<00:04:17.789><c> now</c><00:04:18.030><c> count</c><00:04:18.389><c> them</c><00:04:18.660><c> can</c><00:04:19.049><c> we</c><00:04:19.139><c> do</c><00:04:19.260><c> even</c>

00:04:19.490 --> 00:04:19.500 align:start position:0%
will now count them can we do even
 

00:04:19.500 --> 00:04:21.770 align:start position:0%
will now count them can we do even
better<00:04:19.620><c> well</c><00:04:20.340><c> we</c><00:04:20.549><c> could</c><00:04:20.729><c> count</c><00:04:20.970><c> in</c><00:04:21.150><c> threes</c><00:04:21.479><c> or</c>

00:04:21.770 --> 00:04:21.780 align:start position:0%
better well we could count in threes or
 

00:04:21.780 --> 00:04:24.260 align:start position:0%
better well we could count in threes or
fours<00:04:21.810><c> or</c><00:04:22.349><c> even</c><00:04:22.590><c> fives</c><00:04:22.860><c> and</c><00:04:23.160><c> tens</c><00:04:23.190><c> beyond</c><00:04:24.060><c> that</c>

00:04:24.260 --> 00:04:24.270 align:start position:0%
fours or even fives and tens beyond that
 

00:04:24.270 --> 00:04:25.550 align:start position:0%
fours or even fives and tens beyond that
it's<00:04:24.450><c> going</c><00:04:24.599><c> to</c><00:04:24.690><c> get</c><00:04:24.840><c> a</c><00:04:24.870><c> little</c><00:04:25.139><c> bit</c><00:04:25.380><c> difficult</c>

00:04:25.550 --> 00:04:25.560 align:start position:0%
it's going to get a little bit difficult
 

00:04:25.560 --> 00:04:28.040 align:start position:0%
it's going to get a little bit difficult
to<00:04:25.919><c> point</c><00:04:26.250><c> at</c><00:04:26.580><c> the</c><00:04:27.120><c> end</c><00:04:27.360><c> of</c><00:04:27.479><c> the</c><00:04:27.570><c> day</c><00:04:27.750><c> whether</c>

00:04:28.040 --> 00:04:28.050 align:start position:0%
to point at the end of the day whether
 

00:04:28.050 --> 00:04:29.800 align:start position:0%
to point at the end of the day whether
executed<00:04:28.710><c> by</c><00:04:28.830><c> computers</c><00:04:28.889><c> or</c><00:04:29.550><c> humans</c>

00:04:29.800 --> 00:04:29.810 align:start position:0%
executed by computers or humans
 

00:04:29.810 --> 00:04:31.580 align:start position:0%
executed by computers or humans
algorithms<00:04:30.810><c> are</c><00:04:30.960><c> just</c><00:04:31.140><c> a</c><00:04:31.229><c> set</c><00:04:31.440><c> of</c>

00:04:31.580 --> 00:04:31.590 align:start position:0%
algorithms are just a set of
 

00:04:31.590 --> 00:04:32.890 align:start position:0%
algorithms are just a set of
instructions<00:04:32.159><c> with</c><00:04:32.370><c> which</c><00:04:32.550><c> to</c>

00:04:32.890 --> 00:04:32.900 align:start position:0%
instructions with which to
 

00:04:32.900 --> 00:04:35.890 align:start position:0%
instructions with which to
all<00:04:32.930><c> problems</c><00:04:33.229><c> these</c><00:04:34.070><c> were</c><00:04:34.400><c> just</c><00:04:34.580><c> three</c><00:04:34.900><c> what</c>

00:04:35.890 --> 00:04:35.900 align:start position:0%
all problems these were just three what
 

00:04:35.900 --> 00:04:38.670 align:start position:0%
all problems these were just three what
problem<00:04:36.259><c> would</c><00:04:36.350><c> you</c><00:04:36.590><c> solve</c><00:04:36.860><c> with</c><00:04:37.220><c> an</c><00:04:37.310><c> hour</c>

00:04:38.670 --> 00:04:38.680 align:start position:0%
problem would you solve with an hour
 

00:04:38.680 --> 00:04:55.060 align:start position:0%
problem would you solve with an hour
[Music]

