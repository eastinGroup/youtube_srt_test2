WEBVTT
Kind: captions
Language: zh-Hans

00:00:01.280 --> 00:00:04.960
因此您的标准魔方是一个三乘三的拼图

00:00:04.960 --> 00:00:08.800
它由26个微小的立方体组成，有六个面

00:00:08.800 --> 00:00:12.000
每个都有9个相同颜色的小方形面

00:00:12.000 --> 00:00:15.200
哇，我只有一张脸就很难受

00:00:15.200 --> 00:00:18.400
那么这个神秘建筑的内在是什么

00:00:18.400 --> 00:00:21.680
以及它如何运作良好，敬请期待

00:00:21.680 --> 00:00:25.760
拿一个魔方并移动顶面，使其不对齐

00:00:25.760 --> 00:00:29.599
完成后，您可以小心地将其中一个边缘拉起

00:00:29.599 --> 00:00:32.559
手指甚至可以走得更远

00:00:32.559 --> 00:00:36.399
其他零件掉落，您可以看到核心保持六个中心

00:00:36.399 --> 00:00:39.200
即使它们每一边都一块

00:00:39.200 --> 00:00:41.840
旋转它们都不能改变位置

00:00:41.840 --> 00:00:46.320
因为它们被固定在适当的位置，这意味着在原始立方体中

00:00:46.320 --> 00:00:48.960
颜色红色的中心永远是

00:00:48.960 --> 00:00:52.960
与橙色相对，与白色和蓝色相对的黄色

00:00:52.960 --> 00:00:57.760
一块将与绿色相反，边缘块各有两种颜色

00:00:57.760 --> 00:01:02.640
立方体每侧有12个这样的块，然后

00:01:02.640 --> 00:01:07.040
有八个角块，每个角块有三种颜色的边缘

00:01:07.040 --> 00:01:10.159
角落并没有固定在任何东西上，这就是为什么它们可以在

00:01:10.159 --> 00:01:14.960
中心零件捡起您拉下的零件之一并将其转过来

00:01:14.960 --> 00:01:19.520
您可以在其内部看到一些额外的材料，立方体保持其形状

00:01:19.520 --> 00:01:22.880
因为边缘和拐角将彼此固定在适当的位置

00:01:22.880 --> 00:01:26.720
每块都有一个内部卡舌，该卡舌紧贴中心立方体和

00:01:26.720 --> 00:01:30.000
凸耳的周围部分采用以下方式成形：

00:01:30.000 --> 00:01:34.320
它们沿着由其他零件的背面形成的弯曲轨道安装

00:01:34.320 --> 00:01:38.159
如果从内部看这个过程，多维数据集就是这样移动的

00:01:38.159 --> 00:01:42.720
现在该是解决魔方的最激动人心的部分了

00:01:42.720 --> 00:01:46.880
好的，谢谢你，你可以穿得像考试结束了

00:01:46.880 --> 00:01:50.320
现在首先您需要学习魔方的术语

00:01:50.320 --> 00:01:54.960
如果只有我的余生，那么这既是简单又合乎逻辑的男孩

00:01:54.960 --> 00:01:58.159
所有的动作都以代表一个字母的形式写下来

00:01:58.159 --> 00:02:04.799
90度立方体旋转u向上d向下l左r

00:02:04.799 --> 00:02:11.680
右f前b后有一个可选的hurl和smash

00:02:11.680 --> 00:02:15.760
万一您感到沮丧，嘿，我只是在开玩笑

00:02:15.760 --> 00:02:20.200
如果您在字母旁边看到撇号，则表示该图层应移动

00:02:20.200 --> 00:02:23.840
逆时针旋转90度无撇号

00:02:23.840 --> 00:02:27.520
图层顺时针旋转90度

00:02:27.520 --> 00:02:30.959
字母旁边表示您应转的圈数

00:02:30.959 --> 00:02:34.480
这是您右手的主要算法

00:02:34.480 --> 00:02:42.959
它将再次是rur撇号u撇号

00:02:42.959 --> 00:02:47.360
撇号与您的左手正好相反

00:02:47.360 --> 00:02:53.519
l单引号或单引号重复

00:02:53.519 --> 00:02:59.519
如果您想将其钉在第一个上，请立即将其删除

00:02:59.519 --> 00:03:04.560
尝试早晚练习是一个好主意，您将能够做到所有

00:03:04.560 --> 00:03:09.519
动作几乎是自动的，它将在以后帮助您，哦，并且

00:03:09.519 --> 00:03:12.640
如果您重复这些动作六次，

00:03:12.640 --> 00:03:16.239
多维数据集看起来就像刚开始时一样

00:03:16.239 --> 00:03:19.840
要解决这个难题，您必须经历七个阶段

00:03:19.840 --> 00:03:24.080
白十字白角中间层

00:03:24.080 --> 00:03:31.760
黄色交叉黄色边缘黄色角落最后一个阶段

00:03:31.760 --> 00:03:36.959
在这里，我们要进行白色交叉，这里的任务是将白色

00:03:36.959 --> 00:03:41.120
交叉，然后将其边缘与每个边缘上正确的彩色中心对齐

00:03:41.120 --> 00:03:44.879
首先，您必须整理一个序列

00:03:44.879 --> 00:03:48.159
像雏菊一样，很容易，不需要任何东西

00:03:48.159 --> 00:03:52.799
特殊的算法然后用雏菊旋转顶层

00:03:52.799 --> 00:03:56.239
您的目标是制作顶部边缘的前砖

00:03:56.239 --> 00:04:00.000
匹配中心部分的颜色并旋转该层

00:04:00.000 --> 00:04:04.560
180度对剩下的白人也做同样的事情

00:04:04.560 --> 00:04:09.439
这就是在底部获得白色十字的方式

00:04:09.680 --> 00:04:14.239
在这个阶段，您必须将立方体的下角放到白色的角上

00:04:14.239 --> 00:04:18.079
正确的地方和立方体的白色面将被解决

00:04:18.079 --> 00:04:21.919
准备好您必须使用该rur撇号u

00:04:21.919 --> 00:04:26.960
右手的撇号算法仅将多维数据集的顶层旋转到

00:04:26.960 --> 00:04:30.160
找到一个与中心颜色相同的角

00:04:30.160 --> 00:04:33.600
另一边然后使用算法直到拐角处

00:04:33.600 --> 00:04:39.040
在正确的地方在其他角落做同样的事情

00:04:39.120 --> 00:04:42.720
在这一阶段，您必须专注于中间层的其余部分

00:04:42.720 --> 00:04:46.960
您的任务是使边缘块与中心的颜色相同

00:04:46.960 --> 00:04:50.400
在第一种情况下，您将要处理的图层

00:04:50.400 --> 00:04:54.160
位于目标位置顶部的左侧

00:04:54.160 --> 00:04:58.240
您必须将其与正确的颜色匹配，这是您的操作方法

00:04:58.240 --> 00:05:03.199
左移上半部分，右手使用算法

00:05:03.199 --> 00:05:08.800
向左旋转立方体，使用左手算法

00:05:08.800 --> 00:05:12.000
在第二种情况下，您将要处理的图层

00:05:12.000 --> 00:05:15.680
位于目标位置顶部的右侧

00:05:15.680 --> 00:05:20.639
向右转动上部，左手使用算法

00:05:20.639 --> 00:05:24.080
向右旋转立方体，将算法用于

00:05:24.080 --> 00:05:29.120
右手各方面重复此操作，您就完成了

00:05:29.120 --> 00:05:32.160
现在是黄十字

00:05:32.160 --> 00:05:39.120
您只需要一种算法，因此正面顺时针方向为右侧

00:05:39.120 --> 00:05:46.600
顺时针上表面顺时针右表面逆时针上表面

00:05:46.600 --> 00:05:50.960
逆时针方向和正面逆时针方向

00:05:50.960 --> 00:05:56.800
知道如果第一次无法解决问题，请继续尝试，直到成功为止

00:05:56.800 --> 00:06:00.880
黄色的边缘，现在多维数据集在其顶部有一个黄色的十字

00:06:00.880 --> 00:06:04.560
您必须将黄色边缘调整到最终位置

00:06:04.560 --> 00:06:08.000
它们应与立方体侧面中心部分的颜色匹配

00:06:08.000 --> 00:06:11.680
您可以借助

00:06:11.680 --> 00:06:17.280
跟随算法rur撇号

00:06:17.280 --> 00:06:24.319
您可能需要使用单引号

00:06:24.319 --> 00:06:28.960
算法不止一次，但如果有四种颜色匹配则表示祝贺

00:06:28.960 --> 00:06:34.160
您可以在此阶段跳过此阶段的黄色角落

00:06:34.160 --> 00:06:38.400
任务是将拐角处的颜色与附近的适当颜色相匹配

00:06:38.400 --> 00:06:42.000
中心，您只需要将它们移动到位

00:06:42.000 --> 00:06:46.960
您还没有解决问题，而是找到了已经存在的角落

00:06:46.960 --> 00:06:50.160
在这种情况下，它甚至可以正确旋转，但这是

00:06:50.160 --> 00:06:55.280
不重要的撇号

00:06:55.280 --> 00:07:01.440
撇号撇号不断运行

00:07:01.440 --> 00:07:07.759
直到获得所需的结果，才是最后阶段

00:07:07.759 --> 00:07:10.000
剩下要做的就是解决

00:07:10.000 --> 00:07:14.000
角落，您需要立方体的黄色面朝向您

00:07:14.000 --> 00:07:17.039
现在您必须使用右上角的位置

00:07:17.039 --> 00:07:21.520
让我们一个接一个地解决它不要旋转立方体并做所有步骤

00:07:21.520 --> 00:07:24.240
一步一步，很多人在这方面犯错

00:07:24.240 --> 00:07:29.840
阶段并且必须从头开始，所以要格外注意做这个算法

00:07:29.840 --> 00:07:36.240
撇号两次，直到您得到

00:07:36.240 --> 00:07:39.520
完成一招后，您需要的结果

00:07:39.520 --> 00:07:43.759
下一个未解决的黄色片旋转顶层，以便该片

00:07:43.759 --> 00:07:48.879
再次位于右上角，并重复相同的算法

00:07:48.879 --> 00:07:53.599
撇号和撇号在算法之间

00:07:53.599 --> 00:07:57.120
永远不要转动整个立方体或两个底层

00:07:57.120 --> 00:08:01.680
最后旋转顶层，使所有立方体的颜色都匹配

00:08:01.680 --> 00:08:10.319
现在你已经不是那么简单了，嘿，别把那个立方体扔给我

