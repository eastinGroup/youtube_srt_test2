WEBVTT
Kind: captions
Language: zh-Hans

00:00:00.000 --> 00:00:05.190
最终放弃了，但是如果我告诉你任何人都可以解决魔方

00:00:05.190 --> 00:00:11.130
使用一种算法，我自己进行了测试，检查起来非常简单

00:00:11.130 --> 00:00:18.000
对于初学者来说还可以，我们来看看3x3立方体由三个主要部分组成

00:00:18.000 --> 00:00:24.570
零件中心的边缘和角落，以了解这些算法的工作原理

00:00:24.570 --> 00:00:29.760
必须学习魔方的行话，所有动作都用字母写下来，

00:00:29.760 --> 00:00:41.160
代表一个90度的立方体旋转是向右L向左向上向下F前

00:00:41.160 --> 00:00:48.390
并返回撇号表示该层应逆时针移动

00:00:48.390 --> 00:00:55.020
90度无撇号表示有数字时顺时针旋转90度

00:00:55.020 --> 00:00:59.910
在字母旁边，它代表您应该在

00:00:59.910 --> 00:01:04.409
算法，今天我将向您展示，您将只使用该算法

00:01:04.409 --> 00:01:11.310
黄色区域，您现在可以暂停视频并练习旋转，所以这是

00:01:11.310 --> 00:01:19.770
右手的主要算法远距离是'单引号，一次

00:01:19.770 --> 00:01:24.299
你又是撇号

00:01:24.299 --> 00:01:33.119
这与您的左撇号正好相反

00:01:33.119 --> 00:01:39.119
撇号撇号L让我们看看现实生活中的样子

00:01:39.119 --> 00:01:49.229
右手是撇号，又是'

00:01:49.229 --> 00:01:59.790
您现在是左撇号，您又是左撇号，

00:01:59.790 --> 00:02:06.659
撇号L年，然后再继续操作是个好主意，请先暂停视频并

00:02:06.659 --> 00:02:11.370
练习直到您几乎可以自动完成所有这些动作为止

00:02:11.370 --> 00:02:15.770
可以，稍后再帮助您，所以您将经历七个阶段

00:02:15.770 --> 00:02:21.500
在今天的算法中，第二个底部的白色十字上的白色十字

00:02:21.500 --> 00:02:28.060
底角三号中间层四号黄色十字

00:02:28.060 --> 00:02:36.280
排名第五的顶层排名第六的顶部角落排名第七的最终目标

00:02:36.280 --> 00:02:42.230
第一名解决底部的白色十字架的任务是将它们放在一起

00:02:42.230 --> 00:02:47.810
一个白色的十字架，并将其边缘与右侧的正确的中心对齐

00:02:47.810 --> 00:02:57.830
在这里，我先将所有内容混合在一起，让我们开始吧，您必须

00:02:57.830 --> 00:03:01.340
把这个看起来像菊花的序列放在一起

00:03:01.340 --> 00:03:24.500
这真的很容易，不需要任何特殊的算法，然后自己尝试

00:03:24.500 --> 00:03:27.320
旋转上面装有雏菊的顶层

00:03:27.320 --> 00:03:32.540
将图层的正确颜色与中心颜色对齐并旋转

00:03:32.540 --> 00:03:38.980
此层180度与其余白人做同样的事情

00:03:38.980 --> 00:04:04.630
[音乐]这就是您如何获得白色十字的方式

00:04:04.630 --> 00:04:11.530
底部数字以解决此处底部的四个角点

00:04:11.530 --> 00:04:15.400
阶段，您必须将立方体的下角放置在正确的位置

00:04:15.400 --> 00:04:25.600
立方体的白色面将被解决，这是您将使用的地方

00:04:25.600 --> 00:04:32.169
您是'您的右撇号算法仅使顶部旋转

00:04:32.169 --> 00:04:36.910
多维数据集的图层以查找与中心的颜色相同的角

00:04:36.910 --> 00:04:42.510
另一边并使用算法，直到拐角处在正确的位置

00:04:42.510 --> 00:04:53.860
[音乐]其余角落也一样

00:04:53.860 --> 00:05:17.810
[音乐]

00:05:17.870 --> 00:05:23.569
在此阶段结束时，您应该在所有面上都没有倒装的三通

00:05:23.569 --> 00:05:29.880
结束于第三个中心点，解决了中间的四个边缘点

00:05:29.880 --> 00:05:35.280
在此阶段，您需要解决中间层的其余部分，以便

00:05:35.280 --> 00:05:41.099
在第一种情况下，外部块与中心的颜色相同

00:05:41.099 --> 00:05:48.479
您将要进行的工作是目标位置顶部的左侧

00:05:48.479 --> 00:05:53.970
将其与正确的颜色匹配，这是您可以通过将上部转到顶部的方法

00:05:53.970 --> 00:05:59.580
左手使用算法，右手旋转立方体，左手使用

00:05:59.580 --> 00:06:06.870
在第二种情况下，左手将使用的算法是您将要使用的图层

00:06:06.870 --> 00:06:12.060
必须位于目标位置顶部的右侧

00:06:12.060 --> 00:06:17.250
相应的颜色将右上角的部分用于算法

00:06:17.250 --> 00:06:23.759
左手旋转立方体，右手使用算法，右手重复

00:06:23.759 --> 00:06:52.069
四面八方，您就完成了[音乐]

00:06:53.419 --> 00:06:59.879
第四个解决顶层上的黄色边缘首先，您将一个

00:06:59.879 --> 00:07:09.809
如果看不到黄线，则在立方体的黄色面上显示黄色十字

00:07:09.809 --> 00:07:23.579
但是只有随机的一组黄色边缘会在您开始时开始执行该算法

00:07:23.579 --> 00:07:28.819
看到黄线开始执行相同的算法

00:07:31.660 --> 00:07:41.560
这就是您获得第五名的方法，解决了

00:07:41.560 --> 00:07:47.620
现在我们需要布置黄色十字的边缘，以便

00:07:47.620 --> 00:07:57.310
第二种颜色与该侧的颜色一致，让我们开始寻找一种

00:07:57.310 --> 00:08:03.190
已经到位的边缘旋转多维数据集的顶层以对齐边缘

00:08:03.190 --> 00:08:08.080
使用相应的颜色，只有一个边缘匹配是很重要的

00:08:08.080 --> 00:08:13.510
如果有两个匹配项，则应使用略微修改的算法来混合

00:08:13.510 --> 00:08:25.370
边缘[音乐]

00:08:25.370 --> 00:08:31.650
再次，只有一条边缘的颜色应该重合，使那条边缘保持在您的面前，

00:08:31.650 --> 00:08:35.820
使用相同的算法，直到剩下的边在右边为止

00:08:35.820 --> 00:08:53.210
职位[音乐]

00:08:53.210 --> 00:08:56.210
瞧

00:08:57.260 --> 00:09:04.170
在这个阶段，第六位将黄色角定位在顶层，任务是

00:09:04.170 --> 00:09:07.830
用合适的颜色将角落放置在适当的位置

00:09:07.830 --> 00:09:12.390
中心，您只需要将它们移到适当的位置即可，而不仅仅是解决它们

00:09:12.390 --> 00:09:19.920
但在这种情况下，找到已经到位的角甚至已经旋转

00:09:19.920 --> 00:09:25.860
正确，但这并不重要，请使用经过稍微修改的算法，直到

00:09:25.860 --> 00:09:34.940
角落在他们的位置[音乐]

00:09:34.940 --> 00:09:42.630
七号完成后，您几乎解决了顶层上的黄色角落

00:09:42.630 --> 00:09:46.550
完成所有您需要做的就是解决弯道

00:09:46.550 --> 00:09:51.720
旋转立方体，使黄色的一面朝向您，您将使用

00:09:51.720 --> 00:09:57.660
右上角让我们逐个解决它不要旋转立方体并做

00:09:57.660 --> 00:10:02.580
一切都一步一步，很多人在此阶段犯错，并且不得不

00:10:02.580 --> 00:10:08.910
从头开始，所以要小心使用您已经知道的算法

00:10:08.910 --> 00:10:20.490
修改顺序，直到完成一步操作就解决了死角

00:10:20.490 --> 00:10:25.850
接下来，通过旋转面对您的一面并使用相同的算法

00:10:25.850 --> 00:10:35.580
[音乐]旋转前一层，使所有

00:10:35.580 --> 00:10:40.580
立方体的颜色匹配，就完成了

00:10:40.670 --> 00:10:45.210
恭喜您现在知道如何解决经典的3x3

00:10:45.210 --> 00:10:51.060
 rubik的多维数据集，此方法也可用于其他类型的3x3多维数据集，但

00:10:51.060 --> 00:10:55.920
真正的关键是它还可以帮助解决更复杂的问题，因此只需保持

00:10:55.920 --> 00:11:00.780
练习，您很快就能解决多维数据集

00:11:00.780 --> 00:11:05.340
使用这种算法，或者您有自己的方法，请告诉我

00:11:05.340 --> 00:11:09.620
如果您学到一些东西，请在评论中写下

